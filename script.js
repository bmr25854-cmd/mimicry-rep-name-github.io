// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ LocalStorage
const DB_KEY = 'auth_system_users';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
function getDatabase() {
    const data = localStorage.getItem(DB_KEY);
    return data ? JSON.parse(data) : {};
}

function saveDatabase(data) {
    localStorage.setItem(DB_KEY, JSON.stringify(data));
}

function generateKey() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let key = '';
    for (let i = 0; i < 12; i++) {
        if (i > 0 && i % 4 === 0) key += '-';
        key += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    document.getElementById('newKey').value = key;
}

function addUser() {
    const login = document.getElementById('newLogin').value.trim();
    const key = document.getElementById('newKey').value.trim();

    if (!login || !key) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }

    const db = getDatabase();
    
    if (db[login]) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
    }

    db[login] = {
        key: key,
        created: new Date().toLocaleDateString(),
        active: true
    };

    saveDatabase(db);
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!');
    
    document.getElementById('newLogin').value = '';
    document.getElementById('newKey').value = '';
    
    loadUsers();
}

function deleteUser(login) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${login}?`)) return;

    const db = getDatabase();
    delete db[login];
    saveDatabase(db);
    loadUsers();
}

function loadUsers() {
    const db = getDatabase();
    const container = document.getElementById('usersList');
    
    if (Object.keys(db).length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
        return;
    }

    container.innerHTML = '';
    for (const [login, user] of Object.entries(db)) {
        const userElement = document.createElement('div');
        userElement.className = 'user-item';
        userElement.innerHTML = `
            <div class="user-info">
                <strong>${login}</strong> - ${user.key}
                <br><small>–°–æ–∑–¥–∞–Ω: ${user.created} | –ê–∫—Ç–∏–≤–µ–Ω: ${user.active ? '‚úÖ' : '‚ùå'}</small>
            </div>
            <div class="user-actions">
                <button class="delete-btn" onclick="deleteUser('${login}')">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        container.appendChild(userElement);
    }
}

function exportDatabase() {
    const db = getDatabase();
    const dataStr = JSON.stringify(db, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = 'users_database.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
}

function importDatabase(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = JSON.parse(e.target.result);
            saveDatabase(data);
            loadUsers();
            alert('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!');
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞!');
        }
    };
    reader.readAsText(file);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadUsers();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL API
    document.getElementById('apiUrl').textContent = window.location.href;
    document.getElementById('status').textContent = 'GitHub Pages –∞–∫—Ç–∏–≤–µ–Ω';
    document.getElementById('status').className = 'status-online';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
    const userSection = document.querySelector('.section:nth-child(2)');
    const importExportHTML = `
        <div style="margin-top: 20px; border-top: 1px solid #ddd; padding-top: 15px;">
            <button onclick="exportDatabase()">üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã</button>
            <label style="display:inline-block; margin-left:10px;">
                üì• –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã
                <input type="file" accept=".json" onchange="importDatabase(event)" 
                       style="display:none;" id="importInput">
            </label>
        </div>
    `;
    userSection.insertAdjacentHTML('beforeend', importExportHTML);
});
